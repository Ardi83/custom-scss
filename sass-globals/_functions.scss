// Columns to percent - Gives a percentage value based on the number of columns and breakpoint specificed.
@function columns-to-percent($columns: 8, $breakpoint: mobile, $include-gutter: true) {
    $columnWidth: 100%;
    @if ($breakpoint == mobile) {
        $columnWidth: 100% / $site-columns-mobile;
    } @else if ($breakpoint == tablet) {
        $columnWidth: 100% / $site-columns-tablet;
    } @else if ($breakpoint == desktop) {
        $columnWidth: 100% / $site-columns-desktop;
    }
    @if ($include-gutter) {
        @return $columnWidth * $columns;
    } @else {
        $gutterWidth: 0px;
        @if ($breakpoint == mobile) {
            $gutterWidth: $site-gutter-mobile;
        } @else if ($breakpoint == tablet) {
            $gutterWidth: $site-gutter-tablet;
        } @else if ($breakpoint == desktop) {
            $gutterWidth: $site-gutter-desktop;
        }
        @return calc(#{$columnWidth * $columns} - #{$columns * $gutterWidth});
    }
}

// Strips units from a value (10px becomes 10).
@function strip-unit($num) {
    @return $num / ($num * 0 + 1);
}

// Replace values in passed string with replacer.
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace +
            str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}

// Encode symbols
@function url-encode($string) {
    $map: (
        '%': '%25',
        '<': '%3C',
        '>': '%3E',
        ' ': '%20',
        '!': '%21',
        '*': '%2A',
        "'": '%27',
        '"': '%22',
        '(': '%28',
        ')': '%29',
        ';': '%3B',
        ':': '%3A',
        '@': '%40',
        '&': '%26',
        '=': '%3D',
        '+': '%2B',
        '$': '%24',
        ',': '%2C',
        '/': '%2F',
        '?': '%3F',
        '#': '%23',
        '[': '%5B',
        ']': '%5D'
    );

    $new: $string;

    @each $search, $replace in $map {
        $new: str-replace($new, $search, $replace);
    }

    @return $new;
}

// Format the SVG as a URL
@function inline-svg($string) {
    @return url('data:image/svg+xml,#{url-encode($string)}');
}
